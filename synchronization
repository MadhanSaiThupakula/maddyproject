import threading

student = [[0 for i in range(4)] for j in range(3)]
teacher_lock = threading.Lock()

def teacher():
    global ch1, ch2
    teacher_lock.acquire()
    print("First Resource on shared table: ", end="")
    ch1 = int(input())
    print("Second Resource on shared table: ", end="")
    ch2 = int(input())
    teacher_lock.release()

def student1():
    student_lock.acquire()
    print("Choices Made = 'paper', 'question_paper'")
    student[0][3] = 1
    print("\n\tStudent 1 has Completed the assignment.\n")
    student_lock.release()

def student2():
    student_lock.acquire()
    print("Choices Made = 'pen', 'question_paper'")
    student[1][3] = 1
    print("\n\tStudent 2 has Completed the assignment.\n")
    student_lock.release()

def student3():
    student_lock.acquire()
    print("Choices Made = 'pen', 'paper'")
    student[2][3] = 1
    print("\n\tStudent 3 has Completed the assignment.\n")
    student_lock.release()

student_lock = threading.Lock()
ch1, ch2 = 0, 0
student[0][0] = 1
student[1][1] = 2
student[2][2] = 1

print("\t\t\t---Welcome---")
print("Resources Menu: \n\t\tPress '1' for pen\n\t\tPress '2' for paper \n\t\tPress '3' for question_paper\n") 
while True:
    if all(student[i][3] == 1 for i in range(3)):
        break
    t_thread = threading.Thread(target=teacher)
    t_thread.start()
    t_thread.join()

    if (ch1 == 1 and ch2 == 2 or ch2 == 1 and ch1 == 2) and student[2][3] == 0:
        s_thread = threading.Thread(target=student3)
        s_thread.start()
        s_thread.join()
    elif (ch1 == 1 and ch2 == 3 or ch2 == 1 and ch1 == 3) and student[1][3] == 0:
        s_thread = threading.Thread(target=student2)
        s_thread.start()
        s_thread.join()
    elif (ch1 == 2 and ch2 == 3 or ch2 == 2 and ch1 == 3) and student[0][3] == 0:
        s_thread = threading.Thread(target=student1)
        s_thread.start()
        s_thread.join()
    else:
        print("\n\tError.. Try again with different choices.\n")

print("\n\t----Done---\n")
